<!DOCTYPE html>
<html lang="en">
    <body id="body">
        <style>
            html, body, svg {
                padding:0;
                margin:0;
                background-color: black;
            }
            
            #grid {
                background-color: black;
                position: absolute;
                left: 1%;
                top: 1%;
                width: 98%;
                height: 98%;
            }

            .draggable {
                cursor: move;
            }
        </style>
        <svg id="grid"
             xmlns="http://www.w3.org/2000/svg"
             onload="makeDraggable(evt)"
             viewBox="0 0 100 100">
        </svg>
        <script type="text/javascript">
            var dots = null;
            var radius = null;
            var dim = null;

            function update_data() {
                log("getting list of dots")
                url="{{ url_for('get_projection_grid') }}"
                fetch(url, {
                    method: "GET",
                })
                .then((response) => response.json())
                .then((json) => {
                    dots = json.dots;
                    radius = json.radius;
                    dim = json.dim;
                    draw_grid();
                });
            }
            
            function draw_stone(id, box, stroke) {
                // https://stackoverflow.com/questions/1734745/how-to-create-circle-with-b%C3%A9zier-curves
                ratio = 0.552284749831;
                //ratio = 2/3;
                //ratio = 1;

                n = box["n"];
                ne = box["ne"];
                e = box["e"];
                se = box["se"];
                s = box["s"];
                sw = box["sw"];
                w = box["w"];
                nw = box["nw"];

                let element = document.createElementNS('http://www.w3.org/2000/svg','path');
                element.setAttribute('id',id);
                element.setAttribute('class','draggable');
                element.setAttribute('fill',stroke);
                element.setAttribute('stroke',stroke);
                element.setAttribute('stroke-width',"1px");
                element.setAttribute('vector-effect', 'non-scaling-stroke');

                // https://medium.com/@bragg/cubic-bezier-curves-with-svg-paths-a326bb09616f
                d = `M\n${w[0]},${w[1]}`;

                h = [(sw[0]-w[0])*ratio, (sw[1]-w[1])*ratio];
                d += `\nC\n${w[0]+h[0]},${w[1]+h[1]}`;

                h = [(sw[0]-s[0])*ratio, (sw[1]-s[1])*ratio];
                d += `\n${s[0]+h[0]},${s[1]+h[1]}`;
                d += `\n${s[0]},${s[1]}`;

                h = [(se[0]-e[0])*ratio, (se[1]-e[1])*ratio];
                d += `\nS\n${e[0]+h[0]},${e[1]+h[1]}`;
                d += `\n${e[0]},${e[1]}`;

                h = [(ne[0]-n[0])*ratio, (ne[1]-n[1])*ratio];
                d += `\nS\n${n[0]+h[0]},${n[1]+h[1]}`;
                d += `\n${n[0]},${n[1]}`;

                h = [(nw[0]-w[0])*ratio, (nw[1]-w[1])*ratio];
                d += `\nS\n${w[0]+h[0]},${w[1]+h[1]}`;
                d += `\n${w[0]},${w[1]}`;
                
                element.setAttribute('d',d);
                document.getElementById('grid').appendChild(element);
            }

            function draw_grid() {
                log("redrawing the grid")
                document.getElementById("grid").innerHTML = '';
                
                // goban dots
                for (const [id, data] of Object.entries(dots)) {
                    if (data['stroke'] != "black") {
                        draw_stone(id, data['box'], data['stroke'])
                    }
                }
            }
            
            update_data();

            document.addEventListener('keydown', evt => {
                if (evt.key === 'Escape') {
                    fullscreen()
                }
            });

            function fullscreen() {
                url="{{ url_for('toggle_fullscreen') }}"
                fetch(url, {
                    method: "GET",
                })
            }
            
            function log(text) {
                url="{{ url_for('log') }}"
                fetch(url, {
                    method: "POST",
                    body: JSON.stringify({
                        "text": text,
                    }),
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    }
                })
                console.log(text)
            }

        </script>
    </body>
</html>
